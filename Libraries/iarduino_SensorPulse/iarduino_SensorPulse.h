//	Библиотека работы arduino с датчиком пульса
//
//	Подключение библиотеки:
//	#include <iarduino_SensorPulse.h>
//	iarduino_SensorPulse Pulse(вывод_датчика_пульса [, вывод зуммера]); // Указываются № выводов arduino подключенных к датчику пульса и зуммера
//	
//	В библиотеке реализованы 2 функции:
//	Функция begin    Назначение:            Инициализация работы с датчиком пульса
//	                 Синтаксис:             begin();
//	                 Параметры:             Нет
//	                 Возвращаемые значения: Нет
//	                 Примечание:            Вызывается 1 раз в начале кода.
//	
//	Функция check    Назначение:            Определение состояния и данных сенсора
//	                 Синтаксис:             check(параметр);
//	                 Параметры:             ISP_ANALOG - функция вернёт значение аналогового входа, к которому подключён датчик (число от 0 до 1024)
//	                                        ISP_PULSE  - функция вернёт среднее значение пульса (количество ударов в минуту)
//	                                        ISP_BEEP   - функция вернёт количество десятых долей секунды, прошедших после последнего пика пульса
//	                                        ISP_VALID  - возвращает состояние датчика: ISP_CONNECTED    - подключён (данные похожи на пульс);
//	                                                                                   ISP_DISCONNECTED - отключён  (данные не соответствуют пульсу);
//	                                                                                   ISP_CHANGED      - состояние сенсора изменилось (с подключён на отключён или наоборот).
//

#ifndef iarduino_SensorPulse_h
#define iarduino_SensorPulse_h

#if defined(ARDUINO) && (ARDUINO >= 100)
#include <Arduino.h>
#else
#include <WProgram.h>
#endif
								
#define	ISP_ANALOG			0									//	переменная для получения данных с сенсора - текущее значение сенсора
#define	ISP_BEEP			1									//	переменная для получения данных с сенсора - десятые доли секунды прошедшие с последнего пульса
#define	ISP_PULSE			2									//	переменная для получения данных с сенсора - среднее значение пульса
#define	ISP_VALID			3									//	переменная для получения данных с сенсора - состояние сенсора

#define	ISP_DISCONNECTED	0									//	состояние сенсора - отключён
#define	ISP_CONNECTED		1									//	состояние сенсора - подключён
#define	ISP_CHANGED			2									//	состояние сенсора - изменилось

class iarduino_SensorPulse{
	public:			iarduino_SensorPulse(uint8_t, uint8_t=255);	//	указываем номер аналогового входа к которому подключён сенсор
	/**	пользовательские функции **/
		void		begin				();						//	инициализация счётчика пульса	(без параметров)
		uint16_t	check				(uint8_t);				//	проверка результата				(что проверять)
	private:
	/**	внутренние функции **/
		void		ISP_func_SET_Timer2	(uint32_t);				//	установка таймера2				(частота прерываний в Гц)
		uint16_t	ISP_func_CheckBeep	();						//	проверка времени прошедшего после вершины пульса
		uint16_t	ISP_func_CheckPulse	();						//	проверка значения пульса
		uint8_t		ISP_func_CheckValid	();						//	проверка валидности результата
	/**	внутренние переменные **/
};

class iarduino_SensorPulse_VolatileVariableClass{
	public:
	/**	переменные изменяемые в прерываниях **/
		volatile	bool			ISP_flag_VAL=0;				//	флаг указывающий о том, что показания сенсора валидны
		volatile	uint8_t			ISP_pins_SEN=255;			//	номер аналогового входа, к которому подключён сенсор пульса
		volatile	uint8_t			ISP_pins_BEP=255;			//	номер цифрового  вывода, к которому подключён биппер
		volatile	bool			ISP_data_BEP=0;				//	состояние на выводе, к которому подключён биппер
		volatile	bool			ISP_flag_BEP=0;				//	флаг указывающий о том, что биппер подключён
		volatile	uint16_t		ISP_data_PIN[10];			//	10 последних значений, прочитанных с аналогового входа, к которому подключён сенсор пульса
		volatile	uint16_t		ISP_data_MAX=0;				//  максимальное значение сенсора за текущие 2 секунды
		volatile	uint16_t		ISP_data_MIN=1024;			//  минимальное  значение сенсора за текущие 2 секунды
		volatile	uint16_t		ISP_data_CEN=0;				//  2/3 части от минимального до максимального значения за предыдущие 2 секунды
		volatile	uint16_t		ISP_time_CNT=0;				//	счетчик прерываний 2 таймера
		volatile	uint8_t			ISP_data_TOP=0;				//	количество точек графика находящихся возле вершины пульса
		volatile	bool			ISP_flag_TOP=0;				//	флаг указывающий о том, что более 7 точек графика находятся возле вершины пульса
		volatile	uint16_t		ISP_time_TOP=0;				//	время прошедшее после того, как более 7 точек графика вошли в вершину пульса
		volatile	uint16_t		ISP_time_ARR[5]={0,0,0,0,0};//	промежутки времени между 6 последними пульсами
		volatile	unsigned long	ISP_time_NOW;				//	время фиксации последнего     пульса
		volatile	unsigned long	ISP_time_WAS;				//	время фиксации предпоследнего пульса
};

#endif